{"version":3,"file":"js/870.88e55a04.js","mappings":"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","sources":["webpack://editor/./src/components/markdown/vue/index.vue","webpack://editor/./src/components/markdown/md/个人项目.md","webpack://editor/./src/components/markdown/vue/index.vue?db7e","webpack://editor/./node_modules/marked/lib/marked.cjs"],"sourcesContent":["<template>\r\n  <div v-html=\"articalContent\" class=\"markdown-body\"></div>\r\n</template>\r\n<script>\r\nimport DemoMd from '../md/个人项目.md';\r\nexport default {\r\n  data() {\r\n    return {\r\n      articalContent: \"\"\r\n    };\r\n  },\r\n  mounted() {\r\n    const { marked } = require(\"marked\");\r\n    this.articalContent = marked(DemoMd);\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.markdown-body {\r\n  overflow-y: scroll;\r\n  height: 100%;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n  :deep h1 {\r\n    text-align: left;\r\n    color:red\r\n    ;\r\n  }\r\n  :deep h2 {\r\n    text-align: left;\r\n\r\n  }\r\n  :deep h3 {\r\n    text-align: left;\r\n  }\r\n  :deep h4 {\r\n    text-align: left;\r\n  }\r\n  :deep h5 {\r\n    text-align: left;\r\n  }\r\n  :deep h6 {\r\n    text-align: left;\r\n  }\r\n}\r\n</style>\r\n","// Module\nvar code = \"<h1 id=\\\"个人项目\\\">个人项目</h1> <h2 id=\\\"vue小游戏\\\">vue小游戏</h2> <table> <thead> <th>名称</th> <th>描述</th> <th>操作</th> </thead> <tbody> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/blockBreaker\\\" target=\\\"_blank\\\">打砖块</a></td> <td></td> <td><a href=\\\"/#/blockBreaker\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/Tetris\\\" target=\\\"_blank\\\">俄罗斯方块</a></td> <td></td> <td><a href=\\\"/#/tetris\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/2048Game\\\" target=\\\"_blank\\\">2048</a></td> <td>向右或者向左移动使得相同数字可以合并成更大的数字，最后合成2048赢得比赛</td> <td><a href=\\\"/#/2048\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/mineDlearance\\\" target=\\\"_blank\\\">扫雷</a></td> <td>数字代表以自己为中心的九宫格内炸弹的个数，把所有的炸弹都找出来就可以赢得比赛</td> <td><a href=\\\"/#/mineDlearance\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/gobang\\\" target=\\\"_blank\\\">五子棋</a></td> <td>可以自己与自己博弈，点击机器对战后可以与机器人对决</td> <td><a href=\\\"/#/gobang\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/Sudoku\\\" target=\\\"_blank\\\">数独</a></td> <td>横着竖着以及九宫格内1-9只能填写一次，分简单中等和困难</td> <td><a href=\\\"/#/Sudoku\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/huarongRoad\\\" target=\\\"_blank\\\">华容道</a></td> <td>分五个光卡，把打乱的图片碎片拼正确</td> <td><a href=\\\"/#/huarongRoad\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/xiaoxiaole\\\" target=\\\"_blank\\\">消消乐(三种玩法)</a></td> <td>第一种是两个相同颜色消除；第二种是翻牌子记住颜色，翻到相同颜色的两个消除；第三种是交换两个色块，使得其中一个可以组成三个以上同样颜色的区域，消除后整个往下掉</td> <td><a href=\\\"/#/xiaoxiaole\\\">在线demo</a></td> </tr> </tbody> </table> <h2 id=\\\"vue项目\\\">vue项目</h2> <table> <thead> <th>名称</th> <th>操作</th> </thead> <tbody> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/calendar.vue\\\" target=\\\"_blank\\\">日历</a></td> <td><a href=\\\"/#/calendar\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/Timer.vue\\\" target=\\\"_blank\\\">计时器</a></td> <td><a href=\\\"/#/timer\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/editor\\\" target=\\\"_blank\\\">编辑器</a></td> <td><a href=\\\"/#/editor\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/tianqi\\\" target=\\\"_blank\\\">天气预报</a></td> <td><a href=\\\"/#/tianqi\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/Triangle\\\" target=\\\"_blank\\\">在线图形生成器</a></td> <td><a href=\\\"/#/triangle\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/play\\\" target=\\\"_blank\\\">play</a></td> <td><a href=\\\"/#/play2\\\">在线demo</a></td> </tr> <tr> <td><a href=\\\"https://github.com/fanbingbing16/zhangyanling.github.io/tree/master/src/components/randomPass\\\" target=\\\"_blank\\\">随机密码生成</a></td> <td><a href=\\\"/#/randomPass\\\">在线demo</a></td> </tr> </tbody> </table> <h2 id=\\\"纯css项目\\\">纯css项目</h2> <table> <thead> <th>名称</th> <th>操作</th> </thead> <tbody> <tr> <td><a>helloKitty</a></td> <td><a href=\\\"/#/helloKitty\\\">在线demo</a></td> </tr> <tr> <td><a>哆啦a梦</a></td> <td><a href=\\\"/#/duolam\\\">在线demo</a></td> </tr> </tbody> </table> \";\n// Exports\nexport default code;","import { render } from \"./index.vue?vue&type=template&id=16a36db2&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=16a36db2&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-16a36db2\"]])\n\nexport default __exports__","/**\n * marked v9.0.3 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n'use strict';\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nexports.defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    exports.defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret, '$1');\n            regex = regex.replace(name, val);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(regex, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    // TODO: Fix this rules type\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            list.items[list.items.length - 1].text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            if (!/[:|]/.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c, tokens: [] };\n                }),\n                align: cap[2].replace(/^\\||\\| *$/g, '').split('|'),\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i, j, k, row;\n                for (i = 0; i < l; i++) {\n                    const align = item.align[i];\n                    if (align) {\n                        if (/^ *-+: *$/.test(align)) {\n                            item.align[i] = 'right';\n                        }\n                        else if (/^ *:-+: *$/.test(align)) {\n                            item.align[i] = 'center';\n                        }\n                        else if (/^ *:-+ *$/.test(align)) {\n                            item.align[i] = 'left';\n                        }\n                        else {\n                            item.align[i] = null;\n                        }\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n                        return { text: c, tokens: [] };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n                title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + match[0].length - 1);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                const raw = [...src].slice(0, lLength + match.index + rLength + 1).join('');\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst block = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')',\n    def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label', block._label)\n    .replace('title', block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull', block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g, block.bullet)\n    .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n    .replace('def', '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n    .replace('comment', block._comment)\n    .replace('tag', block._tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g, block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph', block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal,\n    table: '^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table', block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', block._comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr', block.hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', block.lheading)\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme', inline._scheme)\n    .replace('email', inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment', inline._comment)\n    .replace('attribute', inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label', inline._label)\n    .replace('href', inline._href)\n    .replace('title', inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label', inline._label)\n    .replace('ref', block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref', block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n    .replace('reflink', inline.reflink)\n    .replace('nolink', inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal,\n    strong: {\n        start: /^__|\\*\\*/,\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n        endAst: /\\*\\*(?!\\*)/g,\n        endUnd: /__(?!_)/g\n    },\n    em: {\n        start: /^_|\\*/,\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n        endAst: /\\*(?!\\*)/g,\n        endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', inline._label)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal,\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i')\n    .replace('email', inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm,\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || exports.defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || exports.defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    parser = _Parser.parse;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    lexer = _Lexer.lex;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = exports.defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexports.Hooks = _Hooks;\nexports.Lexer = _Lexer;\nexports.Marked = Marked;\nexports.Parser = _Parser;\nexports.Renderer = _Renderer;\nexports.TextRenderer = _TextRenderer;\nexports.Tokenizer = _Tokenizer;\nexports.getDefaults = _getDefaults;\nexports.lexer = lexer;\nexports.marked = marked;\nexports.options = options;\nexports.parse = parse;\nexports.parseInline = parseInline;\nexports.parser = parser;\nexports.setOptions = setOptions;\nexports.use = use;\nexports.walkTokens = walkTokens;\n//# sourceMappingURL=marked.cjs.map\n"],"names":["_createElementBlock","innerHTML","$data","articalContent","class","code","data","mounted","marked","require","this","DemoMd","__exports__","render","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","changeDefaults","newDefaults","exports","defaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","space","src","block","newline","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","ischecked","istask","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","_Lexer","inlineQueue","Object","create","static","lex","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parser","parse","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","cell","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","Set","preprocess","markdown","postprocess","Marked","setOptions","lexInline","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererFunc","rendererKey","tokenizerFunc","tokenizerKey","prevTokenizer","hooksFunc","hooksKey","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","markedInstance","getDefaults"],"sourceRoot":""}